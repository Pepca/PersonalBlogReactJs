// Mixin for fonts
@mixin font($customFontFamily) {
  font-family: -apple-system, BlinkMacSystemFont, $customFontFamily, 'Segoe UI',
    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// /Mixin for fonts

// Adaptive mixin

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    #{$property}: $startSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type==2 {
    #{$property}: $startSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
// /Adaptive mixin

// Functions
@function adaptive-value($maxValue, $minValue, $resolution: 320) {
  $addValue: $maxValue - $minValue;
  @return calc(
    #{$minValue + px} + #{$addValue} *
      ((100vw - #{$resolution + px}) / #{$maxWidth - $resolution})
  );
}
// /Functions
